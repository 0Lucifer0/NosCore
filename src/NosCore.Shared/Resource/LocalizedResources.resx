<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ACCOUNT_ARRIVED" xml:space="preserve">
    <value>Account with SessionId {0} has arrived.</value>
  </data>
  <data name="ALREADY_TAKEN" xml:space="preserve">
    <value>This name is already taken!</value>
  </data>
  <data name="AT_LEAST_ONE_FILE_MISSING" xml:space="preserve">
    <value>At least on of required files is missing</value>
  </data>
  <data name="AUTHENTICATED_ERROR" xml:space="preserve">
    <value>Authenticated Error.</value>
    <comment>check</comment>
  </data>
  <data name="AUTHENTICATED_SUCCESS" xml:space="preserve">
    <value>Authenticated Success!</value>
    <comment>check</comment>
  </data>
  <data name="AUTH_ERROR" xml:space="preserve">
    <value>Auth Error</value>
  </data>
  <data name="AUTH_INCORRECT" xml:space="preserve">
    <value>Incorrect Auth</value>
  </data>
  <data name="CARDS_PARSED" xml:space="preserve">
    <value>{0} Cards Parsed!</value>
  </data>
  <data name="CHARACTER_NOT_INIT" xml:space="preserve">
    <value>Character Not loaded</value>
    <comment>check</comment>
  </data>
  <data name="CLIENT_ARRIVED" xml:space="preserve">
    <value>Client connected, SessionId: {0}</value>
  </data>
  <data name="CLIENT_CONNECTED" xml:space="preserve">
    <value>New client connected. ClientId = {0}</value>
  </data>
  <data name="CLIENT_DISCONNECTED" xml:space="preserve">
    <value>Connection closed.</value>
  </data>
  <data name="CORRUPTED_KEEPALIVE" xml:space="preserve">
    <value>Corrupted Keepalive on client {0}</value>
  </data>
  <data name="CORRUPT_PACKET" xml:space="preserve">
    <value>Packet with Header {0} is corrupt or PacketDefinition is invalid. Content: {1}</value>
  </data>
  <data name="DATABASE_INITIALIZED" xml:space="preserve">
    <value>Database has been initialized.</value>
  </data>
  <data name="DATABASE_NOT_UPTODATE" xml:space="preserve">
    <value>Database may not be up to date. Please consider updating your database.</value>
  </data>
  <data name="DONE" xml:space="preserve">
    <value>Parsing done!</value>
  </data>
  <data name="ENTER_PATH" xml:space="preserve">
    <value>Please enter the directory of files to parse</value>
  </data>
  <data name="ERROR_CHANGE_MAP" xml:space="preserve">
    <value>Character changed while changing map. Do not abuse Commands. {0}</value>
  </data>
  <data name="FORCED_DISCONNECTION" xml:space="preserve">
    <value>Forced Disconnecting of client {0}, too much connections.</value>
  </data>
  <data name="HANDLER_ERROR" xml:space="preserve">
    <value>Handler Error</value>
  </data>
  <data name="HANDLER_NOT_FOUND" xml:space="preserve">
    <value>Could not found Handler implementation for Packet with Header {0}</value>
  </data>
  <data name="INVALID_ACCOUNT" xml:space="preserve">
    <value>Wrong Id!</value>
  </data>
  <data name="INVALID_PASSWORD" xml:space="preserve">
    <value>Wrong Password!</value>
  </data>
  <data name="ITEMS_PARSED" xml:space="preserve">
    <value>{0} items parsed!</value>
  </data>
  <data name="LISTENING_PORT" xml:space="preserve">
    <value>Listening Port {0}</value>
  </data>
  <data name="MAPMONSTERS_LOADED" xml:space="preserve">
    <value>{0} MapMonsters Loaded!</value>
  </data>
  <data name="MAPS_LOADED" xml:space="preserve">
    <value>{0} Maps Loaded!</value>
  </data>
  <data name="MAPS_PARSED" xml:space="preserve">
    <value>{0} Map Parsed!</value>
  </data>
  <data name="MASTER_SERVER_LISTENING" xml:space="preserve">
    <value>MasterServer started successfully.</value>
  </data>
  <data name="MASTER_SERVER_RETRY" xml:space="preserve">
    <value>Cannot connect to Master Server! Trying again in 5 seconds...</value>
  </data>
  <data name="NO_MAP" xml:space="preserve">
    <value>Server need at least nosville MAP to work!</value>
  </data>
  <data name="PARSE_ACCOUNTS" xml:space="preserve">
    <value>Do you want to parse Accounts?</value>
  </data>
  <data name="PARSE_ALL" xml:space="preserve">
    <value>Do you want to parse ALL?</value>
  </data>
  <data name="PARSE_CARDS" xml:space="preserve">
    <value>Do you want to parse Cards?</value>
  </data>
  <data name="PARSE_ITEMS" xml:space="preserve">
    <value>Do you want to parse Items?</value>
  </data>
  <data name="PARSE_MAPNPCS" xml:space="preserve">
    <value>Do you want to parse MapNpcs?</value>
  </data>
  <data name="PARSE_MAPS" xml:space="preserve">
    <value>Do you want to parse Maps?</value>
  </data>
  <data name="PARSE_MAPTYPES" xml:space="preserve">
    <value>Do you want to parse MapTypes? we suggest using with MapTypeMaps</value>
  </data>
  <data name="PARSE_MONSTERS" xml:space="preserve">
    <value>Do you want to parse NpcMonsters?</value>
  </data>
  <data name="PARSE_NPCMONSTERDATA" xml:space="preserve">
    <value>Do you want to parse NpcMonsterData?</value>
  </data>
  <data name="PARSE_NPCMONSTERS" xml:space="preserve">
    <value>Do you want to parse Npcs?</value>
  </data>
  <data name="PARSE_PORTALS" xml:space="preserve">
    <value>Do you want to parse Portals?</value>
  </data>
  <data name="PARSE_QUESTS" xml:space="preserve">
    <value>Do you want to parse Quests?</value>
  </data>
  <data name="PARSE_RECIPES" xml:space="preserve">
    <value>Do you want to parse Recipes?</value>
  </data>
  <data name="PARSE_SHOPITEMS" xml:space="preserve">
    <value>Do you want to parse Shopitems?</value>
  </data>
  <data name="PARSE_SHOPS" xml:space="preserve">
    <value>Do you want to parse Shops?</value>
  </data>
  <data name="PARSE_SHOPSKILLS" xml:space="preserve">
    <value>Do you want to parse Shopskills?</value>
  </data>
  <data name="PARSE_SKILLS" xml:space="preserve">
    <value>Do you want to parse Skills?</value>
  </data>
  <data name="PARSE_TELEPORTERS" xml:space="preserve">
    <value>Do you want to parse Teleporters?</value>
  </data>
  <data name="PARSE_TIMESPACES" xml:space="preserve">
    <value>Do you want to parse TimeSpaces?</value>
  </data>
  <data name="PORTALS_PARSED" xml:space="preserve">
    <value>{0} Portal Parsed!</value>
  </data>
  <data name="REGISTRED_FROM_MASTER" xml:space="preserve">
    <value>Registered on MasterServer</value>
  </data>
  <data name="REGISTRED_ON_MASTER" xml:space="preserve">
    <value>Registered on MasterServer</value>
    <comment>check</comment>
  </data>
  <data name="SELECT_MAPID" xml:space="preserve">
    <value>Please, Select a MapId:</value>
  </data>
  <data name="SUCCESSFULLY_LOADED" xml:space="preserve">
    <value>Successfully Loaded!</value>
  </data>
  <data name="UNRECOGNIZED_MASTER_PACKET" xml:space="preserve">
    <value>Unrecognized Master Packet.</value>
    <comment>check</comment>
  </data>
  <data name="UNREGISTRED_FROM_MASTER" xml:space="preserve">
    <value>Unregistred From Master.</value>
    <comment>check</comment>
  </data>
  <data name="WRONG_SELECTED_MAPID" xml:space="preserve">
    <value>Wrong MapId!</value>
  </data>
</root>