<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension="/" #>
<#@ Assembly Name="System.Core" #>
<#@ assembly name="EnvDte" #>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#    


  foreach(var ns in GetNamespaceElements()) {
    foreach(var cc in ns.Members.OfType<EnvDTE.CodeClass>()) {
	    string classNamespace = "NosCore.Data.Dto";
	    string directory = "Entities";
		int keyCount = 0;
		string dtoInterface = "IDto";
		var inherit = cc.Bases.OfType<EnvDTE.CodeClass>().FirstOrDefault(s => s.Name.EndsWith("Instance"));
		if(inherit != null) { 
			dtoInterface = inherit.Name + "Dto";
			keyCount = 1;
		}
		if(cc.Name == "ItemInstance") {
			dtoInterface = "IItemInstanceDto";
		}
		if(cc.Name.StartsWith("I18N")) {
			directory = "I18N";
			dtoInterface = "II18NDto";
			classNamespace = "NosCore.Data.I18N";
		}

		if(cc.ImplementedInterfaces.OfType<EnvDTE.CodeInterface>().FirstOrDefault(s => s.Name.Contains("IStaticEntity")) != null) {
			directory = "StaticEntities";
			dtoInterface = "IStaticDto";
			classNamespace = "NosCore.Data.StaticEntities";

	//	      [StaticDto(LoadedMessage = LogLanguageKey.ITEMS_LOADED)]
   //     public class ItemDto : IStaticDto
   // [I18NFrom(typeof(I18NItemDto))]
   //     public I18NString Name { get; set; } = new I18NString();

    //    [AdaptMember("Name")]
    //    public string NameI18NKey { get; set; }
		}
#>
//  __  _  __    __   ___ __  ___ ___  
// |  \| |/__\ /' _/ / _//__\| _ \ __| 
// | | ' | \/ |`._`.| \_| \/ | v / _|  
// |_|\__|\__/ |___/ \__/\__/|_|_\___| 
// 
// Copyright (C) 2019 - NosCore
// 
// NosCore is a free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using System.ComponentModel.DataAnnotations;

namespace <#= classNamespace #>
{
	/// <summary>
	/// Represents a DTO class for <#= ns.FullName #>.<#= cc.Name #>.
	/// NOTE: This class is generated by GenerateDtos.tt
	/// </summary>
	public class <#= cc.Name #>Dto : <#= dtoInterface #>
	{
	<#
	 foreach(var prop in GetMembersRecursive(cc)) {
		 if(prop.OverrideKind != EnvDTE80.vsCMOverrideKind.vsCMOverrideKindNone ) {
			continue;
		 }
		 var attr = prop.Attributes.Cast<EnvDTE.CodeAttribute>().FirstOrDefault(s=> s.Name == "Key");
		 if(attr!=null)
		 {
			keyCount++;
	  #>	[<#= attr.Name #>]
	<#
	 }
	 #>
	public <#= prop.Type.AsString #> <#= prop.Name #> { get; set; }

	 <#}
	#>
}
}<#
		if(keyCount != 1) {
		 #>

//This attribute is added to prevent runtime error with missing key attribute. Please add a key to the db entity
[KeyIsMissingFromDbEntity]<#
		}
        // Write new POCO class to its own file
        SaveOutput(cc.Name + "Dto.generated.cs", "./"+directory);
    }
  }
#>

<#
  IEnumerable<EnvDTE.CodeNamespace> GetNamespaceElements()
  {
    var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE))
                        as EnvDTE.DTE;
    var project = visualStudio.Solution.FindProjectItem(this.Host.ResolvePath("../../NosCore.Database/Entities/Account.cs"))
                  .ContainingProject as EnvDTE.Project;
    var projItems = new List<EnvDTE.ProjectItem>();
    FillProjectItems(project.ProjectItems, projItems);
    var names = new HashSet<string>(projItems
      .Where(i => i.FileCodeModel != null)
      .SelectMany(i => i.FileCodeModel.CodeElements.OfType<EnvDTE.CodeElement>())
      .Where(e => e.Kind == EnvDTE.vsCMElement.vsCMElementNamespace && e.FullName == "NosCore.Database.Entities")
      .Select(e => e.FullName));

    var codeNs = new List<EnvDTE.CodeNamespace>();
    FillCodeNamespaces(project.CodeModel.CodeElements.OfType<EnvDTE.CodeNamespace>(), codeNs);

    return codeNs.Where(ns => names.Contains(ns.FullName));
  }

  void FillCodeNamespaces(IEnumerable<EnvDTE.CodeNamespace> parents, List<EnvDTE.CodeNamespace> all)
  {
    foreach (var parent in parents)
    {
      all.Add(parent);
      FillCodeNamespaces(parent.Members.OfType<EnvDTE.CodeNamespace>(), all);
    }
  }

  void FillProjectItems(EnvDTE.ProjectItems items, List<EnvDTE.ProjectItem> ret)
  {
    if (items == null) return;
    foreach(EnvDTE.ProjectItem item in items)
    {
      ret.Add(item);
      FillProjectItems(item.ProjectItems, ret);
    }
  }

   void SaveOutput(string outputFileName, string destinationFolder)
    {
        // Write to destination folder
        string templateDirectory = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), destinationFolder);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);
        File.Delete(outputFilePath);
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 

        // Flush generation
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }

	List<EnvDTE80.CodeProperty2> GetMembersRecursive(EnvDTE.CodeClass cc) {
		 var members = cc.Members.OfType<EnvDTE80.CodeProperty2>().ToList();
		 foreach(var ccparent in cc.Bases.OfType<EnvDTE.CodeClass>().Where(c => !c.Name.EndsWith("Instance"))) {
		   members.AddRange(GetMembersRecursive(ccparent));
		 }
		 return members;
	}
#>